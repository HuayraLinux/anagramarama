This patch allows anagramarama to load the files from usr/share/games following the Debian Policy.
Index: anagramarama-0.4/src/ag.c
===================================================================
--- anagramarama-0.4.orig/src/ag.c	2012-09-03 03:10:44.000000000 +0000
+++ anagramarama-0.4/src/ag.c	2012-09-03 03:19:37.000000000 +0000
@@ -104,13 +104,14 @@
 char shuffle[8] = SPACE_FILLED_CHARS;
 char answer[8]  = SPACE_FILLED_CHARS;
 char language[64];
-char txt[50];
+char txt[250];
 char rootWord[9];
 int updateAnswers = 0;
 int startNewGame = 0;
 int solvePuzzle = 0;
 int shuffleRemaining = 0;
 int clearGuess = 0;
+int clearLastLetter = 0;
 
 time_t gameStart = 0;
 time_t gameTime = 0;
@@ -249,15 +250,16 @@
 static void
 bufferSounds(struct sound **soundCache)
 {
-	pushSound(soundCache, "click-answer", "audio/click-answer.wav");
-	pushSound(soundCache, "click-shuffle", "audio/click-shuffle.wav");
-	pushSound(soundCache, "foundbig", "audio/foundbig.wav");
-	pushSound(soundCache, "found", "audio/found.wav");
-	pushSound(soundCache, "clear", "audio/clearword.wav");
-	pushSound(soundCache, "duplicate", "audio/duplicate.wav");
-	pushSound(soundCache, "badword", "audio/badword.wav");
-	pushSound(soundCache, "shuffle", "audio/shuffle.wav");
-	pushSound(soundCache, "clock-tick", "audio/clock-tick.wav");
+	pushSound(soundCache, "click-answer", DATA_DIR "audio/click-answer.wav");
+	pushSound(soundCache, "click-shuffle", DATA_DIR "audio/click-shuffle.wav");
+	pushSound(soundCache, "foundbig", DATA_DIR "audio/foundbig.wav");
+	pushSound(soundCache, "found", DATA_DIR "audio/found.wav");
+	pushSound(soundCache, "clear", DATA_DIR "audio/clearword.wav");
+	pushSound(soundCache, "clearletter", DATA_DIR "audio/clearword.wav");
+	pushSound(soundCache, "duplicate", DATA_DIR "audio/duplicate.wav");
+	pushSound(soundCache, "badword", DATA_DIR "audio/badword.wav");
+	pushSound(soundCache, "shuffle", DATA_DIR "audio/shuffle.wav");
+	pushSound(soundCache, "clock-tick", DATA_DIR "audio/clock-tick.wav");
 }
 
 /***********************************************************
@@ -505,6 +507,7 @@
 	}
 
 	if (!foundWord) {
+	    updateAnswers = 1;
 		Mix_PlayChannel(-1, getSound("badword"),0);
 	}
 }
@@ -591,7 +594,12 @@
 
 		switch(keyedLetter){
 
-			case SDLK_BACKSPACE: case SDLK_ESCAPE:
+			case SDLK_BACKSPACE:
+				// clear last letter
+				clearLastLetter = 1;
+				break;
+
+			case SDLK_ESCAPE:
 				/* clear has been pressed */
 				clearGuess = 1;
 				break;
@@ -772,6 +780,50 @@
 
 
 /***********************************************************
+synopsis: move last letter from answer to shuffle
+
+inputs:  letters - the letter sprites
+
+outputs:  n/a
+***********************************************************/
+int clearLast(struct sprite** letters){
+
+struct sprite* current = *letters;
+struct sprite* last = NULL;
+int count = 0;
+
+	// find last letter in answer
+	for (current = *letters; current != NULL; current = current->next){
+		if (current->box != ANSWER){
+			continue;
+		}
+
+		if (current->letter == SPACE_CHAR ||
+			current->letter == '\0'){
+			continue;
+		}
+
+		if (last == NULL ||
+			last->toX < current->toX){
+			last = current;
+		}
+	}
+
+	// move the letter back up
+	if (last != NULL && last->box == ANSWER){
+		last->box = SHUFFLE;
+		last->toX = nextBlankPosition(SHUFFLE, &last->index);
+		last->toY = SHUFFLE_BOX_Y;
+		count ++;
+	}
+
+	return count;
+}
+
+
+
+
+/***********************************************************
 synopsis: display the score graphic
 
 inputs: screen - the SDL_Surface to display the image
@@ -1482,6 +1534,13 @@
 			clearGuess = 0;
 		}
 
+		if (clearLastLetter){
+			// clear last letter
+			if (clearLast(&(*letters)) > 0)
+				Mix_PlayChannel(-1, getSound("clear"),0);
+			clearLastLetter = 0;
+		}
+
 		if (quitGame) {
 			done = 1;
 		}
@@ -1517,7 +1576,9 @@
 	strcat(buffer, "wordlist.txt");
 	if ((fp = fopen(buffer, "r")) != NULL)
 		fclose(fp);
+#ifdef DEBUG
 	Debug("testing %s: %s", buffer, (fp == NULL)?"failed":"present");
+#endif
 	return (fp != NULL);
 }
 
@@ -1550,7 +1611,9 @@
 	FILE *fp = NULL;
 	char line[80], *p;
 	if ((fp = fopen(path, "r")) != NULL) {
+#ifdef DEBUG
 		Debug("loading configuration from %s", path);
+#endif
 		while (!feof(fp)) {
 			if ((p = fgets(line, sizeof(line), fp)) != NULL) {
 				int i;
@@ -1584,6 +1647,7 @@
 {
     char *lang = NULL, *p = NULL;
 
+	strcpy(language,DATA_DIR);
 	strcpy(language,"i18n/");
 	if (argc == 2) {
 		strcat(language, argv[1]);
@@ -1593,6 +1657,7 @@
 
     lang = getenv("LANG");
     if (lang != NULL) {
+	    strcpy(language,DATA_DIR);
         strcpy(language,"i18n/");
         strcat(language, lang);
         if (is_valid_locale(language))
@@ -1619,7 +1684,9 @@
         strcat(language, "_");
         GetLocaleInfo(lcid, LOCALE_SISO3166CTRYNAME, 
                       language + strlen(language), sizeof(language));
+#ifdef DEBUG
         Debug("locale %s", language);
+#endif
         if (is_valid_locale(language))
             return;
         *p = 0;
Index: anagramarama-0.4/makefile.linux
===================================================================
--- anagramarama-0.4.orig/makefile.linux	2012-09-03 03:10:44.000000000 +0000
+++ anagramarama-0.4/makefile.linux	2012-09-03 03:10:44.000000000 +0000
@@ -6,6 +6,8 @@
 CFLAGS +=-O9 -funroll-loops -fomit-frame-pointer
 LDFLAGS=`sdl-config --libs` -lSDL_mixer
 
+override CFLAGS+=`sdl-config --cflags` -DDATA_DIR=\"$(prefix)/share/games/anagramarama/\"
+
 ifdef DEBUG
 CFLAGS +=-g -DDEBUG -D_DEBUG
 endif
@@ -47,3 +49,12 @@
 clean:
 	rm -f src/*.o
 	rm -f test_ag test_agcore test_dlb test_linked
+	rm -f $(OUT_FILE)
+
+install: $(OUT_FILE)
+	mkdir -p $(DESTDIR)$(prefix)/bin
+	install -m 755 $(OUT_FILE) $(DESTDIR)$(prefix)/bin
+	mkdir -p $(DESTDIR)$(prefix)/share/anagramarama
+	cp -R i18n $(DESTDIR)$(prefix)/share/anagramarama
+	rm $(DESTDIR)$(prefix)/share/anagramarama/i18n/*/images/Thumbs.db
+	cp -R audio $(DESTDIR)$(prefix)/share/anagramarama
\ No newline at end of file
